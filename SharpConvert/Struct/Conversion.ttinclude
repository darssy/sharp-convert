<#@ include file="UnitDecl.ttinclude"#><##>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#+
    public void GenerateConversionClass(string magnitude)
    {
#>
[Serializable]
public class <#= magnitude #>Conversion<TUnit> : ILinearConversion where TUnit : I<#= magnitude #>
{
	public double ToSiFactor { get; }

	public UnitType UnitType => UnitType.<#= magnitude #>;

	public string Symbol { get; }
		
	private Func<double, TUnit> create;

	protected internal <#= magnitude #>Conversion(double toSiFactor, string symbol, Func<double, TUnit> create)
	{
		if (toSiFactor <= 0)
		{
			throw new ArgumentOutOfRangeException($"SI Factor should be positive value: {toSiFactor}");
		}
		this.create = create ?? throw new ArgumentNullException(nameof(create));
		ToSiFactor = toSiFactor;
		Symbol = symbol;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public TUnit Create(double value) => create(value);
}
<#+
    }
#>

<#+
    public void GenerateExtensionMethods(string magnitude, List<UnitDecl> declaredUnits)
    {
#>
public static class <#= magnitude #>Conversions
{
<#+
        foreach (UnitDecl unit in declaredUnits)
        {
#>
	public static readonly <#= magnitude #>Conversion<<#= unit.StructName #>> <#= unit.UnitName #> = new(<#= unit.ConversionFactor #>, "<#= unit.Symbol #>", v => new <#= unit.StructName #>(v));
<#+
        }
#>

	public static TOut To<TOut, TIn>(this TIn toConvert, <#= magnitude #>Conversion<TOut> conversion)
		where TOut : struct, I<#= magnitude #>
		where TIn : struct, I<#= magnitude #>
	{
		return conversion.Create(toConvert.SiValue / conversion.ToSiFactor);
	}

	public static TOut To<TOut>(this I<#= magnitude #> toConvert, <#= magnitude #>Conversion<TOut> conversion)
		where TOut : struct, I<#= magnitude #>
	{
		return conversion.Create(toConvert.SiValue / conversion.ToSiFactor);
	}
}
<#+
    }
#>
