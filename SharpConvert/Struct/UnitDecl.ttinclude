<#@ import namespace="System.Text" #>
<#@ import namespace="" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#+
    public class UnitDecl
    {
        public string StructName { get; }
        public string UnitName { get; }
        public double ConversionFactor { get; }
        public string Symbol { get; }

        public UnitDecl(string structName, string unitName, double conversionFactor, string symbol)
        {
            StructName = structName;
            UnitName = unitName;
            ConversionFactor = conversionFactor;
            Symbol = symbol;
        }

        public static UnitDecl FromText(string text, char delim = ' ')
        {
            string[] fields = text.Split(delim);

            if (fields.Length > 4) throw new FormatException("Too many arguments for unit declaration");
            if (fields.Length < 4) throw new FormatException("Too few arguments for unit declaration");

            return new UnitDecl(fields[0], fields[1], double.Parse(fields[2], NumberFormatInfo.InvariantInfo), fields[3]);
        }

        public static UnitDecl DerivedFromText(string text, List<UnitDecl> numeratorUnits,
                                               List<UnitDecl> denominatorUnits, char delim = ' ')
        {
            string[] fields = text.Trim().Split(delim);

            if (fields.Length == 0) throw new FormatException("Too few arguments for unit declaration");

            string[] derivativeDecl = fields[0].Split('/');
            if (derivativeDecl.Length != 2)
            {
                throw new FormatException("Expecting a derivative in the form of 'numeratorUnit/denominatorUnit'");
            }
            UnitDecl numerator = numeratorUnits.FirstOrDefault(n => n.UnitName == derivativeDecl[0]);
            if (numerator == null) throw new FormatException($"Unit {derivativeDecl[0]} doesn't exist");

            UnitDecl denominator = denominatorUnits.FirstOrDefault(n => n.UnitName == derivativeDecl[1]);
            if (denominator == null) throw new FormatException($"Unit {derivativeDecl[1]} doesn't exist");

            string symbol = null;
            string unitName = null;
            string structName = null;
            if (fields.Length == 2)
            {
                symbol = fields[1];
            }
            else if (fields.Length == 3)
            {
                symbol = fields[2];
                unitName = fields[1];
                if (unitName.Contains("-"))
                {
                    (unitName, string pluralSuffix) = SplitTwo(unitName, '-');
                    structName = unitName + pluralSuffix;
                }
                else if (unitName.Contains("/"))
                {
                    (unitName, structName) = SplitTwo(unitName, '/');
                }
                else
                {
                    structName = unitName;
                }
            }
            if (fields.Length > 3) throw new FormatException("Too many arguments for unit declaration");

            symbol ??= $"{numerator.Symbol}/{denominator.Symbol}";
            unitName ??= $"{numerator.UnitName}Per{denominator.UnitName}";
            structName ??= $"{numerator.StructName}Per{denominator.UnitName}";
            
            return new UnitDecl(structName, unitName, numerator.ConversionFactor / denominator.ConversionFactor, symbol);
        }
    }
    
    private static (string first, string second) SplitTwo(string toSplit, char token)
    {
        string[] strings = toSplit.Split(token);
        if (strings.Length >= 2) return (strings[0], strings[1]);
        if (strings.Length == 1) return (strings[0], null);
        return (null, null);
    }
#>
